import assert from 'assert';
import { createCipheriv, createDecipheriv, randomBytes } from 'crypto';

import { getLogger } from './log';
import { config } from '../app';

const EMPTY = Buffer.alloc(0);

/** 在这里写生成 “验证码” 的函数，真实实现不公开 */
export function PRF(id: number, uid: string, qq: number, time: number): string {
	return `${id} ${uid}`;
}

/**
 * 在这里写验证 “验证码” 的函数，应为 `PRF` 的反函数，真实实现不公开
 *
 * 验证成功返回 `{ id, uid }` 对象，验证失败返回 `null`
 */
export function validate(qq: number, time: number, ct: string): { id: number, uid: string } | null {
	const arr = ct.split(' ');
	if (arr.length !== 2) return null;
	return { id: Number(arr[0]), uid: arr[1] };
}

/** 正确的实现应当能通过如下测试 */
export function test() {
	const LOGGER = getLogger('PRF:test');
	const t = Math.floor(new Date().getTime() / (config.security.tokenExpire * 1e3));
	const id = 2021011832, uid = 'example21', qq = 123456789;
	const code = PRF(id, uid, qq, t);
	const fake = (code[0] === '0' ? '1' : '0') + code.substring(1)
	LOGGER('code = %o', code);
	{
		const result = validate(qq, t, code);
		LOGGER('result = %o', result);
		assert(result?.id === id && result?.uid === uid);
	}
	{
		const result = validate(qq, t + 1, code);
		LOGGER('succ[2] = %o', result);
		assert(result?.id === id && result?.uid === uid);
	}
	{
		const result = validate(qq + 1, t, code);
		LOGGER('fake[1] = %o', result);
		assert(!result);
	}
	{
		const result = validate(qq, t + 2, code);
		LOGGER('fake[2] = %o', result);
		assert(!result);
	}
	{
		const result = validate(qq, t - 1, code);
		LOGGER('fake[3] = %o', result);
		assert(!result);
	}
	{
		const result = validate(qq, t, fake);
		LOGGER('fake[4] = %o', result);
		assert(!result);
	}
}
